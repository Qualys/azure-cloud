{
  "$schema": "http://schema.management.azure.com/schemas/2018-05-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "apiProfile": "2019-03-01-hybrid",
  "metadata": {
    "comments": "This template is developed for Qualys Virtual Scanner Appliance deployment from image/vhd on Azure.",
    "author": "gakimov, rsoni"
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Input: Location identifier\nDescription: Location identifier for deployment (example:- eastus)\nLearn more: https://azure.microsoft.com/en-in/global-infrastructure/locations/\n"
      }
    },
    "scannerName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Input: Scanner VM name\nDescription: VM name on Azure can be 1-64 character long and may contain alphanumerics, underscores, periods, and hyphens but cannot contain special characters \/\"\"[]:|<>+=;,?*@& or begin with '_' or end with '.' or '-'\nLearn more: https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftcompute\n"
      }
    },
    "scannerVmSize": {
      "type": "string",
      "metadata": {
        "description": "Input: Scanner VM size\nDescription: Choose appropriate size from allowed values\nLearn more: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes\n"
      }
    },
    "perscode": {
      "type": "string",
      "minLength": 14,
      "maxLength": 14,
      "metadata": {
        "description": "Input: Personalization code\nDescription: Qualys scanner personalization code, exactly 14 digits\nLearn more: https://discussions.qualys.com/docs/DOC-5725-scanning-in-microsoft-azure-using-resource-manager-arm\n"
      }
    },
    "proxy": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Input: Proxy string\nDescription: Optional proxy configuration for scanner\nLearn more: https://discussions.qualys.com/docs/DOC-5725-scanning-in-microsoft-azure-using-resource-manager-arm\n"
      }
    },
    "ImageResourceIdOrVhdUri": {
      "type": "string",
      "metadata": {
        "description": "Input: (input_1) qVSA image resource id\n       (input_2) Storage account vhd blob uri\n       (input_3) 'global_marketplace'\nDescription: qVSA image pointer in form of image resourceId, storage account vhd blob uri or 'global_marketplace' string. If you provide vhd blob uri then template will first create qVSA-image-{suffix} vm image from the provided vhd blob\n"
      }
    },
    "osDiskType": {
      "type": "string",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS"
      ],
      "metadata": {
        "description": "Input: OS disk type from allowed values\nDescription: Note that Premium_SSD is supported by selected vm sizes\nLearn more: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types\n"
      }
    },
    "bootDiagStorageAccNameOrUri": {
      "type": "string",
      "metadata": {
        "description": "Input: (input_1) Unique name for new storage account\n       (input_2) Existing storage account uri\nDescription: If you are providing name for new storage account, ensure that name string is unique as storage account names are globally unique. For input_1, template will create new storage account, for input_2, template will use existing storage account. If no input is provided then template will not enable boot diagnostics for vm\n"
      }
    },
    "bootDiagStrorageAccDomain": {
      "type": "string",
      "defaultValue": "blob.local.azurestack.external",
      "metadata": {
        "description": "Input: Storage account domain\nDescription: Storage account domain for boot diagnostics storage account. If empty string provided then template will use Azure Stack Development Kit(ASDK) platform's default domain blob.local.azurestack.external as default. This parameter is not required and will be ignored if using existing storage account URI in bootDiagStorageAccNameOrUri parameter\n"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "metadata": {
        "description": "Input: (input_1) 'new' for new virtual network with default configurations\n       (input_2) resource_id:subnet_name where resource_id is of the existing virtual network and subnet_name is name of existing subnet in the virtual network\nDescription: Virtual network options for scanner vm"
      }
    },
    "newVirtualNetworkCustomObject": {
      "type": "object",
      "defaultValue": {
        "vNetAddressPrefixes": "",
        "subnet": {
          "name": "",
          "addressPrefix": ""
        }
      },
      "metadata": {
        "description": "Input: vNet custom property object\nDescription: Values in this object will override default values\nLearn more: https://github.com/Qualys/azure-cloud/tree/master/qvsa_azure_deploy#custom-virtual-network-and-public-ip-parameters\n"
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "metadata": {
        "description": "Input: (input_1) 'new' for new Public IP with default configurations\n       (input_2) resource_id of the existing dissociated Public IP instance\nDescription: Public IP options for scanner vm. If left empty then template will skip Public IP configuration"
      }
    },
    "newPublicIpCustomObject": {
      "type": "object",
      "defaultValue": {
        "sku": "Basic",
        "publicIpAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 30
      },
      "metadata": {
        "description": "Input: Public Ip custom property object\nDescription: Values in this object will override default values\nLearn more: https://github.com/Qualys/azure-cloud/tree/master/qvsa_azure_deploy#custom-virtual-network-and-public-ip-parameters\n"
      }
    }
  },
  "variables": {
    "randomStr": "[substring(guid(concat(resourceGroup().id), parameters('scannerName')), 0, 4)]",
    "isvNetNew": "[if(or(equals(parameters('virtualNetworkNewOrExisting'), 'new'), empty(parameters('virtualNetworkNewOrExisting'))), bool('true'), bool('false'))]",
    "vNetSubnet": "[if(variables('isvNetNew'), json('[]'), split(parameters('virtualNetworkNewOrExisting'), ':'))]",
    "vNetResource": "[if(not(variables('isvNetNew')), split(variables('vNetSubnet')[0], '/'), json('[]'))]",
    "vNetName": "[concat(take(parameters('scannerName'), 54), '-vNet-', variables('randomStr'))]",
    "subnetName": "[if(empty(parameters('newVirtualNetworkCustomObject').subnet.name), 'scanner-subnet', parameters('newVirtualNetworkCustomObject').subnet.name)]",
    "isPublicIp": "[if(empty(parameters('publicIpNewOrExisting')), bool('false'), bool('true'))]",
    "isPubIpNew": "[if(equals(parameters('publicIpNewOrExisting'), 'new'), bool('true'), bool('false'))]",
    "publicIpName": "[concat(parameters('scannerName'), '-ip-', variables('randomStr'))]",
    "nsgName": "[concat(parameters('scannerName'), '-nsg-', variables('randomStr'))]",
    "netIntName": "[concat(parameters('scannerName'), '-netInt-', variables('randomStr'))]",
    "isBootDiag": "[if(empty(parameters('bootDiagStorageAccNameOrUri')), bool('false'), bool('true'))]",
    "isBootDiagStrAccNew": "[if(or(not(variables('isBootDiag')), contains(parameters('bootDiagStorageAccNameOrUri'), 'https://')), bool('false'), bool('true'))]",
    "bootDiagStrAccName": "[if(variables('isBootDiagStrAccNew'), parameters('bootDiagStorageAccNameOrUri'), 'straccdummystr')]",
    "bootDiagStrAccUri": "[if(variables('isBootDiagStrAccNew'), concat('https://', parameters('bootDiagStorageAccNameOrUri'), '.', parameters('bootDiagStrorageAccDomain')), parameters('bootDiagStorageAccNameOrUri'))]",
    "bootDiag": {
      "enabled": true,
      "storageUri": "[variables('bootDiagStrAccUri')]"
    },
    "bootDiagDisabled": {
      "enabled": false
    },
    "imageName": "[concat('qVSA-image-', variables('randomStr'))]",
    "isVhdBlob": "[if(contains(parameters('ImageResourceIdOrVhdUri'), 'https://'), bool('true'), bool('false'))]",
    "isGlobalMktImage": "[or(empty(parameters('ImageResourceIdOrVhdUri')), equals(parameters('ImageResourceIdOrVhdUri'), 'global_marketplace'))]",
    "netIntIpProp": {
      "privateIpAddressVersion": "IPv4",
      "privateIPAllocationMethod": "Dynamic",
      "subnet": {
        "id": "[if(variables('isvNetNew'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('subnetName')), resourceId(variables('vNetResource')[4], 'Microsoft.Network/virtualNetworks/subnets', variables('vNetResource')[8], variables('vNetSubnet')[1]))]"
      }
    },
    "netIntIpPropPublicIp": {
      "privateIpAddressVersion": "IPv4",
      "privateIPAllocationMethod": "Dynamic",
      "publicIpAddress": {
        "id": "[if(variables('isPubIpNew'), resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName')), parameters('publicIpNewOrExisting'))]"
      },
      "subnet": {
        "id": "[if(variables('isvNetNew'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('subnetName')), resourceId(variables('vNetResource')[4], 'Microsoft.Network/virtualNetworks/subnets', variables('vNetResource')[8], variables('vNetSubnet')[1]))]"
      }
    },
    "networkSecurityGroupRules": [
      {
        "name": "DenyAllInbound",
        "properties": {
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationPortRange": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": 1001,
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAllOutbound",
        "properties": {
          "description": "Allow all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationPortRange": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 1002,
          "direction": "Outbound"
        }
      }
    ],
    "qVSAPublisher": "qualysguard",
    "qVSAOffer": "qualys-virtual-scanner",
    "qVSASku": "qvsa",
    "qVSAVersion": "2.7.2901",
    "imageMarketplace": {
      "publisher": "[variables('qVSAPublisher')]",
      "offer": "[variables('qVSAOffer')]",
      "sku": "[variables('qVSASku')]",
      "version": "[variables('qVSAVersion')]"
    },
    "imageLocal": {
      "id": "[if(variables('isVhdBlob'), resourceId('Microsoft.Compute/images', variables('imageName')), parameters('ImageResourceIdOrVhdUri'))]"
    },
    "vmProperties": {
      "hardwareProfile": {
        "vmSize": "[parameters('scannerVmSize')]"
      },
      "storageProfile": {
        "osDisk": {
          "createOption": "FromImage",
          "managedDisk": {
            "storageAccountType": "[parameters('osDiskType')]"
          }
        },
        "imageReference": "[if(variables('isGlobalMktImage'), variables('imageMarketplace'), variables('imageLocal'))]"
      },
      "networkProfile": {
        "networkInterfaces": [
          {
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]"
          }
        ]
      },
      "osProfile": {
        "computerName": "[parameters('scannerName')]",
        "adminUsername": "[guid(concat(resourceGroup().id), parameters('scannerName'))]",
        "adminPassword": "[guid(concat(resourceGroup().id), parameters('scannerName'))]",
        "customData": "[base64(concat('PERSCODE=', parameters('perscode'), '\n', 'PROXY_URL=', parameters('proxy')))]"
      },
      "diagnosticsProfile": {
        "bootDiagnostics": "[if(variables('isBootDiag'), variables('bootDiag'), variables('bootDiagDisabled'))]"
      }
    },
    "scannerName1": "[if(variables('isGlobalMktImage'),'dummyscannernamestr' ,parameters('scannerName'))]",
    "scannerName2": "[if(variables('isGlobalMktImage') ,parameters('scannerName'), 'dummyscannernamestr')]"
  },
  "resources": [
    {
      "name": "[variables('imageName')]",
      "type": "Microsoft.Compute/images",
      "condition": "[variables('isVhdBlob')]",
      "location": "[parameters('location')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "blobUri": "[parameters('ImageResourceIdOrVhdUri')]",
            "caching": "ReadWrite"
          },
          "dataDisks": [],
          "zoneResilient": false
        }
      }
    },
    {
      "name": "[variables('vNetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "condition": "[variables('isvNetNew')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[if(empty(parameters('newVirtualNetworkCustomObject').vNetAddressPrefixes), json('[\"10.0.0.0/24\"]'), parameters('newVirtualNetworkCustomObject').vNetAddressPrefixes)]"
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[if(empty(parameters('newVirtualNetworkCustomObject').subnet.addressPrefix), '10.0.0.0/24', parameters('newVirtualNetworkCustomObject').subnet.addressPrefix)]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupRules')]"
      }
    },
    {
      "name": "[variables('publicIpName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "condition": "[variables('isPubIpNew')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIpAllocationMethod": "[if(empty(parameters('newPublicIpCustomObject').publicIpAllocationMethod), 'Dynamic', parameters('newPublicIpCustomObject').publicIpAllocationMethod)]",
        "idleTimeoutInMinutes": "[if(empty(string(parameters('newPublicIpCustomObject').idleTimeoutInMinutes)), 30, parameters('newPublicIpCustomObject').idleTimeoutInMinutes)]",
        "publicIpAddressVersion": "IPv4"
      },
      "sku": {
        "name": "[if(empty(parameters('newPublicIpCustomObject').sku), 'Basic', parameters('newPublicIpCustomObject').sku)]"
      }
    },
    {
      "name": "[variables('netIntName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": "[if(variables('isPublicIp'), variables('netIntIpPropPublicIp'), variables('netIntIpProp'))]"
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      }
    },
    {
      "name": "[variables('bootDiagStrAccName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "condition": "[variables('isBootDiag')]",
      "location": "[parameters('location')]",
      "properties": {},
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "name": "[variables('scannerName1')]",
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[not(variables('isGlobalMktImage'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('bootDiagStrAccName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]",
        "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
      ],
      "properties": "[variables('vmProperties')]"
    },
    {
      "name": "[variables('scannerName2')]",
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[variables('isGlobalMktImage')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('bootDiagStrAccName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]",
        "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
      ],
      "properties": "[variables('vmProperties')]",
      "plan": {
        "name": "[variables('qVSASku')]",
        "publisher": "[variables('qVSAPublisher')]",
        "product": "[variables('qVSAOffer')]"
      }
    }
  ],
  "outputs": {
    "ScannerName": {
      "type": "string",
      "value": "[parameters('scannerName')]"
    }
  }
}
