{
  "$schema": "http://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "String",
      "metadata": {
        "description": "Input: Location identifier\nDescription: Location identifier for deployment (example:- eastus)\nLearn more: https://azure.microsoft.com/en-in/global-infrastructure/locations/\n"
      }
    },
    "scannerName": {
      "type": "String",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Input: Scanner VM name\nDescription: VM name on Azure can be 1-64 character long and may contain alphanumerics, underscores, periods, and hyphens but cannot contain special characters /\"\"[]:|<>+=;,?*@& or begin with '_' or end with '.' or '-'\nLearn more: https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftcompute\n"
      }
    },
    "scannerVmSize": {
      "type": "String",
      "defaultValue": "Standard_A2_v2",
      "metadata": {
        "description": "Input: Scanner VM size\nDescription: Choose appropriate size from allowed values\nLearn more: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes\n"
      }
    },
    "perscode": {
      "type": "String",
      "minLength": 14,
      "maxLength": 14,
      "metadata": {
        "description": "Input: Personalization code\nDescription: Qualys scanner personalization code, exactly 14 digits\nLearn more: https://discussions.qualys.com/docs/DOC-5725-scanning-in-microsoft-azure-using-resource-manager-arm\n"
      }
    },
    "proxy": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Input: Proxy string\nDescription: Optional proxy configuration for scanner\nLearn more: https://discussions.qualys.com/docs/DOC-5725-scanning-in-microsoft-azure-using-resource-manager-arm\n"
      }
    },
    "ImageResourceIdOrVhdUri": {
      "type": "String",
      "defaultValue": "global_marketplace",
      "metadata": {
        "description": "Input: (input_1) qVSA image resource id\n       (input_2) Storage account vhd blob uri\n       (input_3) 'global_marketplace'\nDescription: qVSA image pointer in form of image resourceId, storage account vhd blob uri or 'global_marketplace' string. If you provide vhd blob uri then template will first create qVSA-image-{suffix} vm image from the provided vhd blob\n"
      }
    },
    "osDiskType": {
      "type": "String",
      "allowedValues": ["Premium_LRS", "StandardSSD_LRS", "Standard_LRS"],
      "metadata": {
        "description": "Input: OS disk type from allowed values\nDescription: Note that Premium_SSD is supported by selected vm sizes\nLearn more: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types\n"
      }
    },
    "bootDiagStorageAccNameOrUri": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Input: (input_1) Unique name for new storage account\n       (input_2) Existing storage account uri\nDescription: If you are providing name for new storage account, ensure that name string is unique as storage account names are globally unique. For input_1, template will create new storage account, for input_2, template will use existing storage account. If no input is provided then template will not enable boot diagnostics for vm\n"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "String",
      "metadata": {
        "description": "Input: (input_1) 'new' for new virtual network with default configurations\n       (input_2) resource_id:subnet_name where resource_id is of the existing virtual network and subnet_name is name of existing subnet in the virtual network\nDescription: Virtual network options for scanner vm"
      }
    },
    "virtualNetworkName": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the virtual network."
      }
    },
    "newVirtualNetworkCustomObject": {
      "type": "Object",
      "defaultValue": {
        "vNetAddressPrefixes": "",
        "subnet": {
          "name": "",
          "addressPrefix": ""
        }
      },
      "metadata": {
        "description": "Input: vNet custom property object\nDescription: Values in this object will override default values\nLearn more: https://github.com/Qualys/azure-cloud/tree/master/qvsa_azure_deploy#custom-virtual-network-and-public-ip-parameters\n"
      }
    },
    "networkInterfaceName": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the network interface."
      }
    },
    "nsgName": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Network Security Group."
      }
    },
    "publicIpNewOrExisting": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Input: (input_1) 'new' for new Public IP with default configurations\n       (input_2) resource_id of the existing dissociated Public IP instance\nDescription: Public IP options for scanner vm. If left empty then template will skip Public IP configuration"
      }
    },
    "publicIpName": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the the public IP instance."
      }
    },
    "newPublicIpCustomObject": {
      "type": "Object",
      "defaultValue": {
        "sku": "Basic",
        "publicIpAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 30
      },
      "metadata": {
        "description": "Input: Public Ip custom property object\nDescription: Values in this object will override default values\nLearn more: https://github.com/Qualys/azure-cloud/tree/master/qvsa_azure_deploy#custom-virtual-network-and-public-ip-parameters\n"
      }
    }
  },
  "variables": {
    "randomStr": "[substring(guid(concat(resourceGroup().id), parameters('scannerName')), 0, 4)]",
    "isvNetNew": "[if(or(equals(parameters('virtualNetworkNewOrExisting'), 'new'), empty(parameters('virtualNetworkNewOrExisting'))), bool('true'), bool('false'))]",
    "vNetSubnet": "[if(variables('isvNetNew'), json('[]'), split(parameters('virtualNetworkNewOrExisting'), ':'))]",
    "vNetResource": "[if(not(variables('isvNetNew')), split(variables('vNetSubnet')[0], '/'), json('[]'))]",
    "vNetName": "[if(empty(parameters('virtualNetworkName')), concat(parameters('scannerName'), '-vNet-', variables('randomStr')), parameters('virtualNetworkName'))]",
    "subnetName": "[if(empty(parameters('newVirtualNetworkCustomObject').subnet.name), 'scanner-subnet', parameters('newVirtualNetworkCustomObject').subnet.name)]",
    "isPublicIp": "[if(empty(parameters('publicIpNewOrExisting')), bool('false'), bool('true'))]",
    "isPubIpNew": "[if(equals(parameters('publicIpNewOrExisting'), 'new'), bool('true'), bool('false'))]",
    "publicIpName": "[if(empty(parameters('publicIpName')), concat(parameters('scannerName'), '-ip-', variables('randomStr')), parameters('publicIpName'))]",
    "nsgName": "[if(empty(parameters('nsgName')), concat(parameters('scannerName'), '-nsg-', variables('randomStr')), parameters('nsgName'))]",
    "netIntName": "[if(empty(parameters('networkInterfaceName')), concat(parameters('scannerName'), '-netInt-', variables('randomStr')), parameters('networkInterfaceName'))]",
    "isBootDiag": "[if(empty(parameters('bootDiagStorageAccNameOrUri')), bool('false'), bool('true'))]",
    "isBootDiagStrAccNew": "[if(and(variables('isBootDiag'), contains(parameters('bootDiagStorageAccNameOrUri'), 'https://')), bool('false'), bool('true'))]",
    "bootDiagStrAccName": "[if(variables('isBootDiagStrAccNew'), if(empty(parameters('bootDiagStorageAccNameOrUri')), 'straccdummystr', parameters('bootDiagStorageAccNameOrUri')), 'straccdummystr')]",
    "bootDiagStrAccUri": "[if(variables('isBootDiagStrAccNew'), concat('https://', parameters('bootDiagStorageAccNameOrUri'), '.blob.core.windows.net/'), parameters('bootDiagStorageAccNameOrUri'))]",
    "bootDiag": {
      "enabled": true,
      "storageUri": "[variables('bootDiagStrAccUri')]"
    },
    "bootDiagDisabled": {
      "enabled": false
    },
    "imageName": "[concat('qVSA-image-', variables('randomStr'))]",
    "isVhdBlob": "[if(contains(parameters('ImageResourceIdOrVhdUri'), 'https://'), bool('true'), bool('false'))]",
    "isGlobalMktImage": "[or(empty(parameters('ImageResourceIdOrVhdUri')), equals(parameters('ImageResourceIdOrVhdUri'), 'global_marketplace'))]",
    "netIntIpProp": {
      "privateIpAddressVersion": "IPv4",
      "privateIPAllocationMethod": "Dynamic",
      "subnet": {
        "id": "[if(variables('isvNetNew'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('subnetName')), resourceId(variables('vNetResource')[4], 'Microsoft.Network/virtualNetworks/subnets', variables('vNetResource')[8], variables('vNetSubnet')[1]))]"
      }
    },
    "netIntIpPropPublicIp": {
      "privateIpAddressVersion": "IPv4",
      "privateIPAllocationMethod": "Dynamic",
      "publicIpAddress": {
        "id": "[if(variables('isPubIpNew'), resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName')), parameters('publicIpNewOrExisting'))]"
      },
      "subnet": {
        "id": "[if(variables('isvNetNew'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('subnetName')), resourceId(variables('vNetResource')[4], 'Microsoft.Network/virtualNetworks/subnets', variables('vNetResource')[8], variables('vNetSubnet')[1]))]"
      }
    },
    "networkSecurityGroupRules": [
      {
        "name": "DenyAllInbound",
        "properties": {
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationPortRange": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": 1001,
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAllOutbound",
        "properties": {
          "description": "Allow all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationPortRange": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 1002,
          "direction": "Outbound"
        }
      }
    ],
    "qVSAPublisher": "qualysguard",
    "qVSAOffer": "qualys-virtual-scanner",
    "qVSASku": "qvsa",
    "qVSAVersion": "latest",
    "imageMarketplace": {
      "publisher": "[variables('qVSAPublisher')]",
      "offer": "[variables('qVSAOffer')]",
      "sku": "[variables('qVSASku')]",
      "version": "[variables('qVSAVersion')]"
    },
    "imageLocal": {
      "id": "[if(variables('isVhdBlob'), resourceId('Microsoft.Compute/images', variables('imageName')), parameters('ImageResourceIdOrVhdUri'))]"
    },
    "vmProperties": {
      "hardwareProfile": {
        "vmSize": "[parameters('scannerVmSize')]"
      },
      "storageProfile": {
        "osDisk": {
          "createOption": "FromImage",
          "managedDisk": {
            "storageAccountType": "[parameters('osDiskType')]"
          }
        },
        "imageReference": "[if(variables('isGlobalMktImage'), variables('imageMarketplace'), variables('imageLocal'))]"
      },
      "networkProfile": {
        "networkInterfaces": [
          {
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]"
          }
        ]
      },
      "osProfile": {
        "computerName": "[parameters('scannerName')]",
        "adminUsername": "[guid(concat(resourceGroup().id), parameters('scannerName'))]",
        "adminPassword": "[guid(concat(resourceGroup().id), parameters('scannerName'))]"
      },
      "diagnosticsProfile": {
        "bootDiagnostics": "[if(variables('isBootDiag'), variables('bootDiag'), variables('bootDiagDisabled'))]"
      },
      "userData": "[base64(concat('PERSCODE=', parameters('perscode'), '\n', 'PROXY_URL=', parameters('proxy')))]"
    },
    "scannerName1": "[if(variables('isGlobalMktImage'),'dummyscannernamestr' ,parameters('scannerName'))]",
    "scannerName2": "[if(variables('isGlobalMktImage') ,parameters('scannerName'), 'dummyscannernamestr')]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/images",
      "apiVersion": "2019-03-01",
      "name": "[variables('imageName')]",
      "location": "[parameters('location')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "blobUri": "[parameters('ImageResourceIdOrVhdUri')]",
            "caching": "ReadWrite"
          },
          "dataDisks": [],
          "zoneResilient": false
        },
        "hyperVGeneration": "V1"
      },
      "condition": "[variables('isVhdBlob')]"
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "name": "[variables('vNetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[if(empty(parameters('newVirtualNetworkCustomObject').vNetAddressPrefixes), json('[\"10.0.0.0/24\"]'), parameters('newVirtualNetworkCustomObject').vNetAddressPrefixes)]"
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[if(empty(parameters('newVirtualNetworkCustomObject').subnet.addressPrefix), '10.0.0.0/24', parameters('newVirtualNetworkCustomObject').subnet.addressPrefix)]"
            }
          }
        ]
      },
      "condition": "[variables('isvNetNew')]"
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-11-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupRules')]"
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-11-01",
      "name": "[variables('publicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[if(empty(parameters('newPublicIpCustomObject').sku), 'Basic', parameters('newPublicIpCustomObject').sku)]"
      },
      "properties": {
        "publicIpAllocationMethod": "[if(empty(parameters('newPublicIpCustomObject').publicIpAllocationMethod), 'Dynamic', parameters('newPublicIpCustomObject').publicIpAllocationMethod)]",
        "idleTimeoutInMinutes": "[if(empty(string(parameters('newPublicIpCustomObject').idleTimeoutInMinutes)), 30, parameters('newPublicIpCustomObject').idleTimeoutInMinutes)]",
        "publicIpAddressVersion": "IPv4"
      },
      "condition": "[variables('isPubIpNew')]"
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-11-01",
      "name": "[variables('netIntName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": "[if(variables('isPublicIp'), variables('netIntIpPropPublicIp'), variables('netIntIpProp'))]"
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('bootDiagStrAccName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {},
      "condition": "[and(variables('isBootDiag'), variables('isBootDiagStrAccNew'))]"
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[variables('scannerName1')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('bootDiagStrAccName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]",
        "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
      ],
      "properties": "[variables('vmProperties')]",
      "condition": "[not(variables('isGlobalMktImage'))]"
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[variables('scannerName2')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('bootDiagStrAccName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('netIntName'))]",
        "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
      ],
      "plan": {
        "name": "[variables('qVSASku')]",
        "publisher": "[variables('qVSAPublisher')]",
        "product": "[variables('qVSAOffer')]"
      },
      "properties": "[variables('vmProperties')]",
      "condition": "[variables('isGlobalMktImage')]"
    }
  ],
  "outputs": {
    "ScannerName": {
      "type": "String",
      "value": "[parameters('scannerName')]"
    }
  }
}

